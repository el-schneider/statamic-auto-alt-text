const m="ready",x="pending",f="not_found",d="error";function p(t){return t.includes("/assets/")||t.includes("/browse/")}function A(t){const o=/^\/cp\/assets\/browse\/([^/]+)\/(.+?)(?:\/edit)?$/,r=t.match(o);return r&&r[1]&&r[2]?`${r[1]}::${r[2]}`:(console.error("Could not determine Asset Container and Path from URL pattern:",t),null)}async function S(t,o){var r,s;try{return(await Statamic.$axios.post("/cp/auto-alt-text/generate",{asset_path:t,field:o})).data}catch(e){return console.error("Alt text trigger request error:",e),{success:!1,message:((s=(r=e.response)==null?void 0:r.data)==null?void 0:s.message)||e.message||"Error communicating with server."}}}async function T(t,o){var r,s;try{return(await Statamic.$axios.get("/cp/auto-alt-text/check",{params:{asset_path:t,field:o}})).data}catch(e){console.error("Alt text check request error:",e);const a=((s=(r=e.response)==null?void 0:r.data)==null?void 0:s.message)||e.message||"Error checking status.";return{status:d,message:a}}}function y(t){var s;const o=(s=t==null?void 0:t.$el)==null?void 0:s.querySelector("input, textarea");if(!o)return console.warn("Could not find input element to disable interaction."),()=>{};const r=o.readOnly??!1;return o.readOnly=!0,()=>{o&&(o.readOnly=r)}}async function I(t,o,r,s){let e=0;const a=window.setInterval(async()=>{if(e++,console.log(`Polling attempt ${e} for ${t}...`),e>15){clearInterval(a),s(),console.error("Polling timeout exceeded for asset:",t),Statamic.$toast.error(__("auto-alt-text::messages.timeout"));return}const n=await T(t,o);switch(n.status){case m:clearInterval(a),s(),console.log("Alt text ready:",n.caption),Statamic.$toast.success(__("auto-alt-text::messages.success")),r(n.caption);break;case x:break;case f:clearInterval(a),s(),console.error("Asset not found during polling:",t),Statamic.$toast.error(n.message||__("auto-alt-text::messages.asset_not_found"));break;case d:default:clearInterval(a),s(),console.error("Error during polling:",n.message),Statamic.$toast.error(n.message||__("auto-alt-text::messages.polling_error"));break}},1e3)}Statamic.booting(()=>{console.log("Statamic Auto Alt Text Addon Initializing...");const o=(Statamic.$config.get("autoAltText")||{}).enabledFields||["alt","alt_text","alternative_text"],r=__("auto-alt-text::messages.generate_alt_text_action");Statamic.$fieldActions.add("text-fieldtype",{title:r,visible:({handle:s})=>{const e=window.location.pathname;return p(e)&&o.includes(s)},run:async({event:s,handle:e,meta:a,update:n,vm:_})=>{const c=y(_);try{const i=window.location.pathname,l=A(i);if(!l){Statamic.$toast.error(__("auto-alt-text::messages.cannot_determine_asset_path")),c();return}console.log("Triggering alt text generation for:",l,"Field:",e),Statamic.$toast.info(__("auto-alt-text::messages.generation_started"));const g=await S(l,e);if(!g.success){const u=g.message||__("auto-alt-text::messages.trigger_failed");console.error("Trigger Error:",u),Statamic.$toast.error(u),c();return}await I(l,e,n,c)}catch(i){console.error("Error during alt text generation action setup:",i),Statamic.$toast.error(i.message||__("auto-alt-text::messages.unexpected_error")),c()}}}),console.log("Statamic Auto Alt Text Field Action Registered for text-fieldtype.")});
