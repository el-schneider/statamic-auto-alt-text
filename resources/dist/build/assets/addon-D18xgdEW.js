const u="ready",d="pending",_="not_found",l="error";function m(s){return s.includes("/assets/")||s.includes("/browse/")}function p(s){const r=/^\/cp\/assets\/browse\/([^/]+)\/(.+?)(?:\/edit)?$/,e=s.match(r);return e&&e[1]&&e[2]?`${e[1]}::${e[2]}`:(console.error("Could not determine Asset Container and Path from URL pattern:",s),null)}async function x(s,r){var e,a;try{return(await Statamic.$app.config.globalProperties.$axios.post("/cp/auto-alt-text/generate",{asset_path:s,field:r})).data}catch(t){return console.error("Alt text trigger request error:",t),{success:!1,message:((a=(e=t.response)==null?void 0:e.data)==null?void 0:a.message)||t.message||"Error communicating with server."}}}async function A(s,r){var e,a;try{return(await Statamic.$app.config.globalProperties.$axios.get("/cp/auto-alt-text/check",{params:{asset_path:s,field:r}})).data}catch(t){console.error("Alt text check request error:",t);const o=((a=(e=t.response)==null?void 0:e.data)==null?void 0:a.message)||t.message||"Error checking status.";return{status:l,message:o}}}async function f(s,r,e){let a=0;return new Promise((t,o)=>{const c=window.setInterval(async()=>{if(a++,console.log(`Polling attempt ${a} for ${s}...`),a>15){clearInterval(c),o(new Error(__("auto-alt-text::messages.timeout")));return}const n=await A(s,r);switch(n.status){case u:clearInterval(c),console.log("Alt text ready:",n.caption),Statamic.$toast.success(__("auto-alt-text::messages.success")),e(n.caption),t();break;case d:break;case _:clearInterval(c),o(new Error(n.message||__("auto-alt-text::messages.asset_not_found")));break;case l:default:clearInterval(c),o(new Error(n.message||__("auto-alt-text::messages.polling_error")));break}},1e3)})}Statamic.booting(()=>{console.log("Statamic Auto Alt Text Addon Initializing...");const r=(Statamic.$config.get("autoAltText")||{}).enabledFields||["alt","alt_text","alternative_text"],e=__("auto-alt-text::messages.generate_alt_text_action");Statamic.$fieldActions.add("text-fieldtype",{title:e,icon:"image",visible:a=>{const t=window.location.pathname;return m(t)&&r.includes(a.handle)},run:async a=>{const{handle:t,update:o}=a,c=window.location.pathname,n=p(c);if(!n){Statamic.$toast.error(__("auto-alt-text::messages.cannot_determine_asset_path"));return}try{Statamic.$toast.info(__("auto-alt-text::messages.generation_started"));const i=await x(n,t);if(!i.success){const g=i.message||__("auto-alt-text::messages.trigger_failed");Statamic.$toast.error(g);return}await f(n,t,o)}catch(i){console.error("Error during alt text generation:",i),Statamic.$toast.error(i.message||__("auto-alt-text::messages.unexpected_error"))}}}),console.log("Statamic Auto Alt Text Field Action Registered for text-fieldtype.")});
